a[,c(1,3,2)]
a<-dbGetQuery(cn, 	"
SELECT
*
FROM
PheWAS.dbo.Icd9CodeTranslation I
WHERE
I.PheWASString LIKE '%alzheimer%'"
)
a
200000/365
24*20*12
10*365
100*12
24*20*12*4
24*20*12*4*2
12*1000
15*12
480*12
24*20*12
24*20*12*4*2
15*30*12*2
24*20*12*4*2
24*20*12*4*2*24
24*20*12*4*1*24
24*20*12*4*1
24*10*12*4*1
24*10*12*4*1*24
15*30*12*1*2
15*30*12*1*2*6
1392.47-1391.68
0.79*90
2140.8+166.2*3
68*2.54
65*2.54
42*3
150-126
24/42*30
library(ComplexHeatmap);
mat = matrix(rnorm(800),80,10);
cor.mat= cor(mat)
dist.mat = (1-cor.mat)/2;
rowdist = dist(as.matrix(dist.mat), method = "euclidean")
rowcluster = hclust(rowdist, method = "ward.D2")
coldist = dist(t(as.matrix(dist.mat)), method = "euclidean")
colcluster = hclust(coldist, method = "ward.D2")
par(mfrow=c(1,2));plot(rowcluster);plot(colcluster);
Heatmap(cor.mat ,cluster_rows=rowcluster, cluster_columns=colcluster)
library(ComplexHeatmap);
mat = matrix(rnorm(800),80,10);
cor.mat= cor(mat)
dist.mat = (1-cor.mat)/2;
rowdist = dist(as.matrix(dist.mat), method = "euclidean")
rowcluster = hclust(rowdist, method = "ward.D2")
coldist = dist(t(as.matrix(dist.mat)), method = "euclidean")
colcluster = hclust(coldist, method = "ward.D2")
par(mfrow=c(1,2));plot(rowcluster);plot(colcluster);
Heatmap(cor.mat ,cluster_rows=rowcluster, cluster_columns=colcluster)
library(ComplexHeatmap);
mat = matrix(rnorm(800),80,10);
cor.mat= cor(mat)
dist.mat = (1-cor.mat)/2;
rowdist = dist(as.matrix(dist.mat), method = "euclidean")
rowcluster = hclust(rowdist, method = "ward.D2")
coldist = dist(t(as.matrix(dist.mat)), method = "euclidean")
colcluster = hclust(coldist, method = "ward.D2")
par(mfrow=c(1,2));plot(rowcluster);plot(colcluster);
Heatmap(cor.mat ,cluster_rows=rowcluster, cluster_columns=colcluster)
?save
1000000/86400
24*3600
108553905/4096
108553905/26400
26*7*26+26*2+15
26*7*26+15
26+26*26+5*26*26+15
15000000.0/12
#install.packages('readr', repos='http://cran.us.r-project.org')
#install.packages('httr', repos='http://cran.us.r-project.org')
library(readr)
library(httr)
install.packages('readr', repos='http://cran.us.r-project.org')
IRCT_REST_BASE_URL <- "https://nhanes.hms.harvard.edu/"
#REST URL
IRCT_CL_SERVICE_URL <- paste(IRCT_REST_BASE_URL,"rest/v1/",sep="")
#Service URLS
IRCT_RESOURCE_BASE_URL <- paste(IRCT_CL_SERVICE_URL,"resourceService/",sep="")
IRCT_QUERY_BASE_URL <- paste(IRCT_CL_SERVICE_URL,"queryService/",sep="")
IRCT_RESULTS_BASE_URL <- paste(IRCT_CL_SERVICE_URL,"resultService/",sep="")
IRCT_PROCESS_BASE_URL <- paste(IRCT_CL_SERVICE_URL,"processService/",sep="")
#List resources
IRCT_LIST_RESOURCE_URL <- paste(IRCT_RESOURCE_BASE_URL,"resources",sep="")
IRCT_PATH_RESOURCE_URL <- paste(IRCT_RESOURCE_BASE_URL,"path",sep="")
#Query
IRCT_START_QUERY_URL <- paste(IRCT_QUERY_BASE_URL,"startQuery",sep="")
IRCT_CLAUSE_URL <- paste(IRCT_QUERY_BASE_URL,"clause",sep="")
IRCT_RUN_QUERY_URL <- paste(IRCT_QUERY_BASE_URL,"runQuery",sep="")
#Process
IRCT_START_PROCESS_URL <- paste(IRCT_PROCESS_BASE_URL,"startProcess",sep="")
IRCT_UPDATE_PROCESS_URL <- paste(IRCT_PROCESS_BASE_URL,"updateProcess",sep="")
IRCT_RUN_PROCESS_URL <- paste(IRCT_PROCESS_BASE_URL,"runProcess",sep="")
#Result
IRCT_GET_RESULTS_STATUS_URL <- paste(IRCT_RESULTS_BASE_URL,"resultStatus",sep="")
IRCT_GET_RESULTS_FORMATS_URL <- paste(IRCT_RESULTS_BASE_URL,"availableFormats",sep="")
IRCT_GET_RESULTS_URL <- paste(IRCT_RESULTS_BASE_URL,"result",sep="")
library(readr)
startSession <- content(GET('https://nhanes.hms.harvard.edu/rest/v1/securityService/startSession?key=akm44dli9ght7so9m8h7vg0ogr'))
startSession
body <- '{
"select": [
{
"field": {
"pui": "/nhanes/Demo/laboratory/laboratory/pcbs/PCB153 (ng per g)/",
"dataType": "STRING"
},
"alias": "pcb153"
},
{
"field": {
"pui": "/nhanes/Demo/demographics/demographics/AGE/",
"dataType": "STRING"
},
"alias": "Age"
},
{
"field": {
"pui": "/nhanes/Demo/demographics/demographics/SEX/female/",
"dataType": "STRING"
},
"alias": "Gender"
},
{
"field": {
"pui": "/nhanes/Demo/demographics/demographics/SEX/male/",
"dataType": "STRING"
},
"alias": "Gender"
}
],
"where": [
{
"field": {
"pui": "/nhanes/Demo/demographics/demographics/AGE/",
"dataType": "STRING"
},
"predicate": "CONTAINS",
"fields": {
"ENOUNTER": "YES"
}
}
]
}'
resultId <- content(POST(IRCT_RUN_QUERY_URL, body = body))$resultId
resultId
response <- content(GET(paste(IRCT_GET_RESULTS_FORMATS_URL, resultId, sep="/")))
response
rgb<-function(nR,nG,nB){
nmax=max(nR/255,nG/255,nB/255)
nmin=min(nR/255,nG/255,nB/255)
if (nR>nG & nR>nB){
return (((nG/255-nB/255)/(nmax-nmin))*60)
} else if (nG>nB) {
return ((2+(nB/255-nR/255)/(nmax-nmin))*60)
} else {
return ((4+(nR/255-nG/255)/(nmax-nmin))*60)
}
}
rgb(138,184,195)
rgb(8,54,74)
rgb(60,148,158)
rgb(10,52,72)
rgb(255,255,255)
rgb(29,167,167)
rgb(194,169,206)
rgb(77,55,125)
rgb(10,53,74)
rgb(4,8,61)
rgb(41,122,216)
rgb(29,65,162)
rgb(104,187,230)
rgb(31,24,72)
rgb(62,47,98)
502.16/4
408.48/4
109.35*4
109.35*4*1.14
109.35*4*1.145
89.5*4*1.145
314/2
100000/3308.96
100000/30.221
3312.36*30.19
100000/30.19
230000*0.4
230000*0.1
230000*0.01
7387+1484
8871/4/5
8871/3/5
948-454
494.5
494/5
100/6
8871/4
58/1.67/1.67
0.8*24*365
2*24*365
(1-0.01)/0.01
(1-0.0001)/0.0001
1966-18
2000-1948
2012-1948
2017-1948
?apply
?lapply
## We're going to fit a linear regression to predict ASD diagnosis as a function of Member age.
## It's stupid, but a useful example of how to get stuff done with the tables.
## This library provides connectivity to the DB server using an open source JDBC driver
library(SqlServerJtds)
## This library contains some tools for pulling large chunks of data more efficiently than
## using DBI::dbGetQuery(...)
library(SqlTools)
## This library contains functions to pivot a tall 3-column table to a design matrix
library(FactToCube)
## FIXME:
my.username="ky98"
my.password="ky98ky98"
## Set up a connection to the DB server.  Any temp tables that you create will be deleted
## automatically when this connection is closed.  Unclear what the behavior is if R dumps core,
## but I assume that the TDS protocol has some method of detecting dropped connections on the
## server side, eventually.  Under the hood this function is requiring SSL encryption, and the
## server is set up to reject any request without it.  We're using domain authentication here,
## but the function also supports SQL Server logins as well.
cn = connect.sql.server(
database="AetnaDataWarehouse",
domain="CBMIWSQLD02",
server.address="cbmiwsqld02.med.harvard.edu",
user=my.username,
password=my.password)
remove.packages("SqlServerJtds")
remove.packages("SqlTools")
remove.packages("FactToCube")
library(SqlServerJtds)
library(SqlServerJtds)
install.packages("~/Dropbox (HMS)/aetna/aetnaGettingStarted/Getting Started Packet/SqlTools", repo=NULL, type="source")
install.packages("~/Dropbox (HMS)/aetna/aetnaGettingStarted/Getting Started Packet/R Packages/SqlTools", repo=NULL, type="source")
install.packages("~/Dropbox (HMS)/aetna/aetnaGettingStarted/Getting Started Packet/R Packages/SqlServerJtds", repo=NULL, type="source")
install.packages("~/Dropbox (HMS)/aetna/aetnaGettingStarted/Getting Started Packet/R Packages/FactToCube", repo=NULL, type="source")
library(SqlServerJtds)
## This library contains some tools for pulling large chunks of data more efficiently than
## using DBI::dbGetQuery(...)
library(SqlTools)
## This library contains functions to pivot a tall 3-column table to a design matrix
library(FactToCube)
## FIXME:
my.username="ky98"
my.password="ky98ky98"
## Set up a connection to the DB server.  Any temp tables that you create will be deleted
## automatically when this connection is closed.  Unclear what the behavior is if R dumps core,
## but I assume that the TDS protocol has some method of detecting dropped connections on the
## server side, eventually.  Under the hood this function is requiring SSL encryption, and the
## server is set up to reject any request without it.  We're using domain authentication here,
## but the function also supports SQL Server logins as well.
cn = connect.sql.server(
database="AetnaDataWarehouse",
domain="CBMIWSQLD02",
server.address="cbmiwsqld02.med.harvard.edu",
user=my.username,
password=my.password)
require(RJDBC)
remove.packages("RJDBC")
install.packages("RJDBC")
## We're going to fit a linear regression to predict ASD diagnosis as a function of Member age.
## It's stupid, but a useful example of how to get stuff done with the tables.
## This library provides connectivity to the DB server using an open source JDBC driver
library(SqlServerJtds)
## This library contains some tools for pulling large chunks of data more efficiently than
## using DBI::dbGetQuery(...)
library(SqlTools)
## This library contains functions to pivot a tall 3-column table to a design matrix
library(FactToCube)
## FIXME:
my.username="ky98"
my.password="ky98ky98"
## Set up a connection to the DB server.  Any temp tables that you create will be deleted
## automatically when this connection is closed.  Unclear what the behavior is if R dumps core,
## but I assume that the TDS protocol has some method of detecting dropped connections on the
## server side, eventually.  Under the hood this function is requiring SSL encryption, and the
## server is set up to reject any request without it.  We're using domain authentication here,
## but the function also supports SQL Server logins as well.
cn = connect.sql.server(
database="AetnaDataWarehouse",
domain="CBMIWSQLD02",
server.address="cbmiwsqld02.med.harvard.edu",
user=my.username,
password=my.password)
# wilcoxTest.R
#
# compare expression levels of genes across tumor types
#
# Kun-Hsing Yu
# 2017.9.26
rm(list=ls())
setwd("~/Dropbox (HMS)/TSC/geneExpression/CCLE")
genes<-c("TSC1",
"TSC2",
"AKT1",
"MTOR",
"PDK1",
"PTEN",
"PIK3AP1",
"PIK3C2A",
"PIK3C2B",
"PIK3C2G",
"PIK3C3",
"PIK3CA",
"PIK3CB",
"PIK3CD",
"PIK3CG",
"PIK3IP1",
"PIK3R1",
"PIK3R2",
"PIK3R3",
"PIK3R4",
"PIK3R5",
"PIK3R6",
"SGK1",
"SGK2",
"SGK3")
CCLEinfo<-read.table("../CCLE_sample_info_file_2012-10-18.txt",stringsAsFactors=F,header=T,sep="\t")
i=1
geneExpressionFile<-paste("mRNA expression (RNAseq)- ",genes[i],".txt",sep="") # greater in TSC
geneExpressionRaw<-read.table(geneExpressionFile,stringsAsFactors=F,header=F,fill=T,sep="\t")
geneExpression<-geneExpressionRaw[,2:dim(geneExpressionRaw)[2]]
LL<-CCLEinfo[(grepl("acute_lymphoblastic_T_cell_leukaemia", CCLEinfo[,7]) |
grepl("acute_lymphoblastic_B_cell_leukaemia", CCLEinfo[,7])),1]
ML<-CCLEinfo[(grepl("myeloid_leukaemia", CCLEinfo[,7])),1]
lymphoma<-CCLEinfo[(grepl("lymphoma", CCLEinfo[,7])),1]
melanoma<-CCLEinfo[(grepl("malignant_melanoma", CCLEinfo[,6])),1]
TSCrelatedPos<-(grepl("CENTRAL_NERVOUS_SYSTEM", geneExpression[1,]) |
geneExpression[1,] %in% LL)
TSCrelatedNeg<-(grepl("BONE", geneExpression[1,]) |
grepl("THYROID", geneExpression[1,]) |
grepl("TESTIS", geneExpression[1,]) |
geneExpression[1,] %in% ML |
geneExpression[1,] %in% lymphoma)
#grepl("KIDNEY", geneExpression[1,]) |
#grepl("chronic_lymphocytic_leukaemia-small_lymphocytic_lymphoma", CCLEinfo[,7]
#grepl("LUNG", geneExpression[1,]) |
#grepl("LYMPHO", geneExpression[1,]) |
#grepl("SOFT_TISSUE", geneExpression[1,]) |
pEqual<-wilcox.test(as.numeric(geneExpression[2,TSCrelatedPos]),as.numeric(geneExpression[2,TSCrelatedNeg]))$p.value
hist(as.numeric(geneExpression[2,TSCrelatedPos]))
hist(as.numeric(geneExpression[2,TSCrelatedNeg]))
pLess<-wilcox.test(as.numeric(geneExpression[2,TSCrelatedPos]),as.numeric(geneExpression[2,TSCrelatedNeg]),alternative="less")$p.value
pMore<-wilcox.test(as.numeric(geneExpression[2,TSCrelatedPos]),as.numeric(geneExpression[2,TSCrelatedNeg]),alternative="greater")$p.value
geneExpressionFile<-paste("mRNA expression (RNAseq)- ",genes[i],".txt",sep="") # greater in TSC
geneExpressionRaw<-read.table(geneExpressionFile,stringsAsFactors=F,header=F,fill=T,sep="\t")
geneExpression<-geneExpressionRaw[,2:dim(geneExpressionRaw)[2]]
geneExpressionFile<-paste("mRNA expression (RNAseq)- ",genes[i],".txt",sep="") # greater in TSC
geneExpressionRaw<-read.table(geneExpressionFile,stringsAsFactors=F,header=F,fill=T,sep="\t")
geneExpression<-geneExpressionRaw[,2:dim(geneExpressionRaw)[2]]
LL<-CCLEinfo[(grepl("acute_lymphoblastic_T_cell_leukaemia", CCLEinfo[,7]) |
grepl("acute_lymphoblastic_B_cell_leukaemia", CCLEinfo[,7])),1]
ML<-CCLEinfo[(grepl("myeloid_leukaemia", CCLEinfo[,7])),1]
lymphoma<-CCLEinfo[(grepl("lymphoma", CCLEinfo[,7])),1]
melanoma<-CCLEinfo[(grepl("malignant_melanoma", CCLEinfo[,6])),1]
TSCrelatedPos<-(grepl("CENTRAL_NERVOUS_SYSTEM", geneExpression[1,]) |
geneExpression[1,] %in% LL)
TSCrelatedNeg<-(grepl("BONE", geneExpression[1,]) |
grepl("THYROID", geneExpression[1,]) |
grepl("TESTIS", geneExpression[1,]) |
geneExpression[1,] %in% ML |
geneExpression[1,] %in% lymphoma)
#grepl("KIDNEY", geneExpression[1,]) |
#grepl("chronic_lymphocytic_leukaemia-small_lymphocytic_lymphoma", CCLEinfo[,7]
#grepl("LUNG", geneExpression[1,]) |
#grepl("LYMPHO", geneExpression[1,]) |
#grepl("SOFT_TISSUE", geneExpression[1,]) |
pEqual<-wilcox.test(as.numeric(geneExpression[2,TSCrelatedPos]),as.numeric(geneExpression[2,TSCrelatedNeg]))$p.value
hist(as.numeric(geneExpression[2,TSCrelatedPos]))
hist(as.numeric(geneExpression[2,TSCrelatedNeg]))
pLess<-wilcox.test(as.numeric(geneExpression[2,TSCrelatedPos]),as.numeric(geneExpression[2,TSCrelatedNeg]),alternative="less")$p.value
pMore<-wilcox.test(as.numeric(geneExpression[2,TSCrelatedPos]),as.numeric(geneExpression[2,TSCrelatedNeg]),alternative="greater")$p.value
write.table(c(pEqual,pLess,pMore),paste("wilcox_",genes[i],".txt",sep=""),quote=F,row.names=F,col.names=F)
TSCPlot<-as.data.frame(rbind(cbind("TSC+",t(geneExpression[2,TSCrelatedPos])),cbind("TSC-",t(geneExpression[2,TSCrelatedNeg]))))
colnames(TSCPlot)<-c("TSC","values")
TSCPlot[,2]<-as.numeric(as.character(TSCPlot[,2]))
ggplot(TSCPlot, aes(x=TSC, y=values, fill=TSC)) +
geom_violin() +
#geom_boxplot() +
ggtitle(genes[i]) +
xlab("TSC Status") +
ylab("log10 (RPKM)") +
scale_color_brewer(palette="Dark2") +
theme(plot.title=element_text(size = rel(2), hjust = 0.5))
ggplot(TSCPlot,aes(x=values)) +
geom_histogram(data=subset(TSCPlot,TSC == 'TSC+'),fill = "red", alpha = 0.5) +
geom_histogram(data=subset(TSCPlot,TSC == 'TSC-'),fill = "blue", alpha = 0.5)
library(ggplot2)
print(
ggplot(TSCPlot,aes(x=values)) +
geom_density(data=subset(TSCPlot,TSC == 'TSC+'),fill = "red", alpha = 0.2) +
geom_density(data=subset(TSCPlot,TSC == 'TSC-'),fill = "blue", alpha = 0.2) +
ggtitle(genes[i]) +
xlab("log10 (RPKM)") +
ylab("Density") +
scale_color_brewer(palette="Dark2") +
theme(axis.title=element_text(size = rel(1.5)),
axis.text=element_text(size = rel(1.5)),
plot.title=element_text(size = rel(2), hjust = 0.5))
)
ggplot(TSCPlot,aes(x=values)) +
geom_density(data=subset(TSCPlot,TSC == 'TSC+'),fill = "red", alpha = 0.2) +
geom_density(data=subset(TSCPlot,TSC == 'TSC-'),fill = "blue", alpha = 0.2) +
ggtitle(genes[i])
ggplot(TSCPlot,aes(x=values)) +
geom_density(data=subset(TSCPlot,TSC == 'TSC+'),fill = "red", alpha = 0.2) +
geom_density(data=subset(TSCPlot,TSC == 'TSC-'),fill = "blue", alpha = 0.2) +
ggtitle(genes[i]) +
xlab("log10 (RPKM)") +
ylab("Density") +
#scale_color_brewer(palette="Dark2") +
scale_colour_manual("", breaks = c("TempMax", "TempMedia"),values = c("red", "blue")) +
theme(axis.title=element_text(size = rel(1.5)),
axis.text=element_text(size = rel(1.5)),
plot.title=element_text(size = rel(2), hjust = 0.5))
ggplot(TSCPlot,aes(x=values)) +
geom_density(data=subset(TSCPlot,TSC == 'TSC+'),fill = "red", alpha = 0.2) +
geom_density(data=subset(TSCPlot,TSC == 'TSC-'),fill = "blue", alpha = 0.2) +
ggtitle(genes[i]) +
xlab("log10 (RPKM)") +
ylab("Density") +
#scale_color_brewer(palette="Dark2") +
scale_colour_manual('Legend:', values = c('one'='red','two'='blue')) +
#scale_colour_manual("", breaks = c("TempMax", "TempMedia"),values = c("red", "blue")) +
theme(axis.title=element_text(size = rel(1.5)),
axis.text=element_text(size = rel(1.5)),
plot.title=element_text(size = rel(2), hjust = 0.5))
ggplot(iris) +
geom_density(aes(x=Sepal.Width, colour=Species),show_guide=FALSE) +
stat_density(aes(x=Sepal.Width, colour=Species),
geom="line",position="identity", size = 0) +
guides(colour = guide_legend(override.aes=list(size=1)))
ggplot(iris) +
+     geom_density(aes(x=Sepal.Width, colour=Species),show_guide=FALSE) +
+     stat_density(aes(x=Sepal.Width, colour=Species),
+                  geom="line",position="identity", size = 0)
ggplot(iris) +
+     geom_density(aes(x=Sepal.Width, colour=Species),show_guide=FALSE) +
+     stat_density(aes(x=Sepal.Width, colour=Species),
+                  geom="line",position="identity", size = 0))
ggplot(iris) +
+     geom_density(aes(x=Sepal.Width, colour=Species),show_guide=FALSE) +
+     stat_density(aes(x=Sepal.Width, colour=Species),
+                  geom="line",position="identity", size = 0)
4*12
8*12
40*2.54
48*2.54
96*2.54
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
outputTableFile[1:2,]
viewPublicationsTop100Show[1:2,]
viewPublicationsTop100Show[1,]
input$viewPublicationsProtein
viewPublicationsTop100Show[1,]
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
0.41/2+0.5
setwd("~/Dropbox (HMS)/proteomicsText/")
library(shiny)
runApp("metaShinyApp")
